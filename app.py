# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oqp3l3Oes2vWhURFttH_ZF9jDV6R-yiR
"""

!pip install dash pandas plotly openpyxl dash-bootstrap-components

import dash
from dash import dcc, html, dash_table
from dash.dependencies import Input, Output
import dash_bootstrap_components as dbc
import pandas as pd
import plotly.express as px

# Load Data
df = pd.read_excel("Marine Pollution data.xlsx", sheet_name="ENV_Marine_Pollution_Obs_data_v")
df['inc_date'] = pd.to_datetime(df['inc_date'], errors='coerce')
df['pollution_qty'] = pd.to_numeric(df['pollution_qty'], errors='coerce')

# Hapus kolom Note dan data yang tidak punya koordinat
note_cols = [col for col in df.columns if col.startswith("Note")]
df.drop(columns=note_cols, inplace=True)
df = df.dropna(subset=['LAT_1', 'LONG'])

# Inisialisasi App
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.SANDSTONE])
app.title = "Marine Pollution Dashboard"

# Layout
app.layout = dbc.Container([
    html.H1("Marine Pollution Dashboard", className="text-center my-4"),

    # Filter Baris
    dbc.Row([
        dbc.Col([
            html.Label("Filter Negara"),
            dcc.Dropdown(
                options=[{'label': c, 'value': c} for c in sorted(df['Country'].dropna().unique())],
                value=None,
                id='country-filter',
                placeholder='Pilih negara (opsional)'
            )
        ], md=4),

        dbc.Col([
            html.Label("Filter Jenis Polusi"),
            dcc.Dropdown(
                options=[{'label': p, 'value': p} for p in sorted(df['pollution_type'].dropna().unique())],
                value=None,
                id='pollution-type-filter',
                placeholder='Pilih jenis polusi (opsional)'
            )
        ], md=4),

        dbc.Col([
            html.Label("Rentang Tanggal"),
            dcc.DatePickerRange(
                id='date-range-filter',
                start_date=df['inc_date'].min(),
                end_date=df['inc_date'].max(),
                display_format='YYYY-MM-DD'
            )
        ], md=4),
    ], className="mb-4"),

    html.Hr(),

    # Peta
    dbc.Row([
        dbc.Col([
            html.H4("Sebaran Lokasi Insiden Polusi Laut"),
            dcc.Graph(id='pollution-map')
        ])
    ], className="mb-4"),

    # Bar Chart
    dbc.Row([
        dbc.Col([
            html.H4("Jenis Polusi Paling Umum"),
            dcc.Graph(id='pollution-bar')
        ])
    ], className="mb-4"),

    # Time Trend
    dbc.Row([
        dbc.Col([
            html.H4("Tren Waktu Insiden Polusi"),
            dcc.Graph(id='time-trend')
        ])
    ], className="mb-4"),

    # Awareness Pie Chart
    dbc.Row([
        dbc.Col([
            html.H4("Kesadaran dan Edukasi Publik"),
            dcc.Graph(id='awareness-chart')
        ])
    ], className="mb-4"),

    # Data Table
    html.Hr(),
    html.H4("Detail Data Insiden"),
    dash_table.DataTable(
        id='data-table',
        columns=[{'name': col, 'id': col} for col in ['Country', 'inc_date', 'pollution_type', 'material', 'LAT_1', 'LONG']],
        page_size=10,
        style_table={'overflowX': 'auto'},
        style_cell={'textAlign': 'left', 'padding': '5px'},
        style_header={'backgroundColor': 'lightblue', 'fontWeight': 'bold'}
    )
], fluid=True)

# Helper Filter
def filter_df(country, ptype, start_date, end_date):
    dff = df.copy()
    if country:
        dff = dff[dff['Country'] == country]
    if ptype:
        dff = dff[dff['pollution_type'] == ptype]
    if start_date and end_date:
        dff = dff[(dff['inc_date'] >= start_date) & (dff['inc_date'] <= end_date)]
    return dff

# Callback: Map
@app.callback(
    Output('pollution-map', 'figure'),
    Input('country-filter', 'value'),
    Input('pollution-type-filter', 'value'),
    Input('date-range-filter', 'start_date'),
    Input('date-range-filter', 'end_date')
)
def update_map(country, ptype, start_date, end_date):
    dff = filter_df(country, ptype, start_date, end_date)
    fig = px.scatter_geo(
        dff,
        lat='LAT_1', lon='LONG',
        color='pollution_type',
        hover_name='Country',
        title="Peta Lokasi Insiden Polusi Laut",
        projection="natural earth"
    )
    return fig

# Callback: Bar Chart
@app.callback(
    Output('pollution-bar', 'figure'),
    Input('country-filter', 'value'),
    Input('pollution-type-filter', 'value'),
    Input('date-range-filter', 'start_date'),
    Input('date-range-filter', 'end_date')
)
def update_bar(country, ptype, start_date, end_date):
    dff = filter_df(country, ptype, start_date, end_date)
    top_pollution = dff['pollution_type'].value_counts().nlargest(10)
    fig = px.bar(
        x=top_pollution.index,
        y=top_pollution.values,
        labels={'x': 'Jenis Polusi', 'y': 'Jumlah Kejadian'},
        title="Top 10 Jenis Polusi"
    )
    return fig

# Callback: Time Trend
@app.callback(
    Output('time-trend', 'figure'),
    Input('country-filter', 'value'),
    Input('pollution-type-filter', 'value'),
    Input('date-range-filter', 'start_date'),
    Input('date-range-filter', 'end_date')
)
def update_time_trend(country, ptype, start_date, end_date):
    dff = filter_df(country, ptype, start_date, end_date)
    dff = dff.dropna(subset=['inc_date'])
    trend = dff.groupby(dff['inc_date'].dt.to_period('M')).size().sort_index()
    trend.index = trend.index.to_timestamp()
    fig = px.line(
        x=trend.index,
        y=trend.values,
        labels={'x': 'Bulan', 'y': 'Jumlah Insiden'},
        title='Tren Waktu Insiden Polusi Laut'
    )
    return fig

# Callback: Awareness Pie Chart
@app.callback(
    Output('awareness-chart', 'figure'),
    Input('country-filter', 'value'),
    Input('pollution-type-filter', 'value'),
    Input('date-range-filter', 'start_date'),
    Input('date-range-filter', 'end_date')
)
def update_awareness(country, ptype, start_date, end_date):
    dff = filter_df(country, ptype, start_date, end_date)
    if 'aware_ans' in dff.columns:
        aware_count = dff['aware_ans'].dropna().value_counts()
        if aware_count.empty:
            return px.pie(title="Tidak Ada Data Kesadaran")
        fig = px.pie(
            names=aware_count.index,
            values=aware_count.values,
            title="Status 'Aware' Masyarakat"
        )
        return fig
    return px.pie(title="Kolom 'aware_ans' tidak tersedia")

# Callback: Data Table
@app.callback(
    Output('data-table', 'data'),
    Input('country-filter', 'value'),
    Input('pollution-type-filter', 'value'),
    Input('date-range-filter', 'start_date'),
    Input('date-range-filter', 'end_date')
)
def update_table(country, ptype, start_date, end_date):
    dff = filter_df(country, ptype, start_date, end_date)
    return dff[['Country', 'inc_date', 'pollution_type', 'material', 'LAT_1', 'LONG']].to_dict('records')

# Run App
if __name__ == '__main__':
    app.run(debug=True)
